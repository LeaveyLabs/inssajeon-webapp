{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n// @mui\nimport { useTheme } from '@mui/material/styles';\n// hooks\nimport useResponsive from '../hooks/useResponsive'; // ----------------------------------------------------------------------\n\nexport default function GetFontValue(variant) {\n  _s();\n\n  const theme = useTheme();\n  const breakpoints = useWidth();\n  const key = theme.breakpoints.up(breakpoints === 'xl' ? 'lg' : breakpoints);\n  const hasResponsive = variant === 'h1' || variant === 'h2' || variant === 'h3' || variant === 'h4' || variant === 'h5' || variant === 'h6';\n  const getFont = hasResponsive && theme.typography[variant][key] ? theme.typography[variant][key] : theme.typography[variant];\n  const fontSize = remToPx(getFont.fontSize);\n  const lineHeight = Number(theme.typography[variant].lineHeight) * fontSize;\n  const {\n    fontWeight,\n    letterSpacing\n  } = theme.typography[variant];\n  return {\n    fontSize,\n    lineHeight,\n    fontWeight,\n    letterSpacing\n  };\n} // ----------------------------------------------------------------------\n\n_s(GetFontValue, \"9SBndw3ZuLbtWrhnMHO5/7vxF7o=\", false, function () {\n  return [useTheme, useWidth];\n});\n\n_c = GetFontValue;\nexport function remToPx(value) {\n  return Math.round(parseFloat(value) * 16);\n}\nexport function pxToRem(value) {\n  return `${value / 16}rem`;\n}\nexport function responsiveFontSizes(_ref) {\n  let {\n    sm,\n    md,\n    lg\n  } = _ref;\n  return {\n    '@media (min-width:600px)': {\n      fontSize: pxToRem(sm)\n    },\n    '@media (min-width:900px)': {\n      fontSize: pxToRem(md)\n    },\n    '@media (min-width:1200px)': {\n      fontSize: pxToRem(lg)\n    }\n  };\n} // ----------------------------------------------------------------------\n\nfunction useWidth() {\n  _s3();\n\n  var _s2 = $RefreshSig$();\n\n  const theme = useTheme();\n  const keys = [...theme.breakpoints.keys].reverse();\n  return (// @ts-ignore not sure what is this\n    keys.reduce(_s2((output, key) => {\n      _s2();\n\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useResponsive('up', key);\n      return !output && matches ? key : output;\n    }, \"tlEsTHh20cBIB2eRXVN9kSt11xI=\", false, function () {\n      return [useResponsive];\n    }), null) || 'xs'\n  );\n}\n\n_s3(useWidth, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"GetFontValue\");","map":{"version":3,"sources":["/Users/adamvnovak/code/inssajeon/inssajeon-webapp/src/utils/getFontValue.ts"],"names":["useTheme","useResponsive","GetFontValue","variant","theme","breakpoints","useWidth","key","up","hasResponsive","getFont","typography","fontSize","remToPx","lineHeight","Number","fontWeight","letterSpacing","value","Math","round","parseFloat","pxToRem","responsiveFontSizes","sm","md","lg","keys","reverse","reduce","output","matches"],"mappings":";;;AAAA;AACA,SAASA,QAAT,QAAyB,sBAAzB;AAEA;AACA,OAAOC,aAAP,MAA0B,wBAA1B,C,CAEA;;AAEA,eAAe,SAASC,YAAT,CAAsBC,OAAtB,EAAwC;AAAA;;AACrD,QAAMC,KAAK,GAAGJ,QAAQ,EAAtB;AACA,QAAMK,WAAW,GAAGC,QAAQ,EAA5B;AAEA,QAAMC,GAAG,GAAGH,KAAK,CAACC,WAAN,CAAkBG,EAAlB,CAAqBH,WAAW,KAAK,IAAhB,GAAuB,IAAvB,GAA8BA,WAAnD,CAAZ;AAEA,QAAMI,aAAa,GACjBN,OAAO,KAAK,IAAZ,IACAA,OAAO,KAAK,IADZ,IAEAA,OAAO,KAAK,IAFZ,IAGAA,OAAO,KAAK,IAHZ,IAIAA,OAAO,KAAK,IAJZ,IAKAA,OAAO,KAAK,IANd;AAQA,QAAMO,OAAY,GAChBD,aAAa,IAAIL,KAAK,CAACO,UAAN,CAAiBR,OAAjB,EAA0BI,GAA1B,CAAjB,GACIH,KAAK,CAACO,UAAN,CAAiBR,OAAjB,EAA0BI,GAA1B,CADJ,GAEIH,KAAK,CAACO,UAAN,CAAiBR,OAAjB,CAHN;AAKA,QAAMS,QAAQ,GAAGC,OAAO,CAACH,OAAO,CAACE,QAAT,CAAxB;AACA,QAAME,UAAU,GAAGC,MAAM,CAACX,KAAK,CAACO,UAAN,CAAiBR,OAAjB,EAA0BW,UAA3B,CAAN,GAA+CF,QAAlE;AACA,QAAM;AAAEI,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAgCb,KAAK,CAACO,UAAN,CAAiBR,OAAjB,CAAtC;AAEA,SAAO;AAAES,IAAAA,QAAF;AAAYE,IAAAA,UAAZ;AAAwBE,IAAAA,UAAxB;AAAoCC,IAAAA;AAApC,GAAP;AACD,C,CAED;;GA1BwBf,Y;UACRF,Q,EACMM,Q;;;KAFEJ,Y;AA4BxB,OAAO,SAASW,OAAT,CAAiBK,KAAjB,EAAgC;AACrC,SAAOC,IAAI,CAACC,KAAL,CAAWC,UAAU,CAACH,KAAD,CAAV,GAAoB,EAA/B,CAAP;AACD;AAED,OAAO,SAASI,OAAT,CAAiBJ,KAAjB,EAAgC;AACrC,SAAQ,GAAEA,KAAK,GAAG,EAAG,KAArB;AACD;AAED,OAAO,SAASK,mBAAT,OAAqF;AAAA,MAAxD;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,EAAN;AAAUC,IAAAA;AAAV,GAAwD;AAC1F,SAAO;AACL,gCAA4B;AAC1Bd,MAAAA,QAAQ,EAAEU,OAAO,CAACE,EAAD;AADS,KADvB;AAIL,gCAA4B;AAC1BZ,MAAAA,QAAQ,EAAEU,OAAO,CAACG,EAAD;AADS,KAJvB;AAOL,iCAA6B;AAC3Bb,MAAAA,QAAQ,EAAEU,OAAO,CAACI,EAAD;AADU;AAPxB,GAAP;AAWD,C,CAED;;AAEA,SAASpB,QAAT,GAAoB;AAAA;;AAAA;;AAClB,QAAMF,KAAK,GAAGJ,QAAQ,EAAtB;AACA,QAAM2B,IAAI,GAAG,CAAC,GAAGvB,KAAK,CAACC,WAAN,CAAkBsB,IAAtB,EAA4BC,OAA5B,EAAb;AACA,SACE;AACAD,IAAAA,IAAI,CAACE,MAAL,KAAY,CAACC,MAAD,EAASvB,GAAT,KAAiB;AAAA;;AAC3B;AACA,YAAMwB,OAAO,GAAG9B,aAAa,CAAC,IAAD,EAAOM,GAAP,CAA7B;AACA,aAAO,CAACuB,MAAD,IAAWC,OAAX,GAAqBxB,GAArB,GAA2BuB,MAAlC;AACD,KAJD;AAAA,cAEkB7B,aAFlB;AAAA,QAIG,IAJH,KAIY;AANd;AAQD;;IAXQK,Q;UACON,Q","sourcesContent":["// @mui\nimport { useTheme } from '@mui/material/styles';\nimport { Variant } from '@mui/material/styles/createTypography';\n// hooks\nimport useResponsive from '../hooks/useResponsive';\n\n// ----------------------------------------------------------------------\n\nexport default function GetFontValue(variant: Variant) {\n  const theme = useTheme();\n  const breakpoints = useWidth();\n\n  const key = theme.breakpoints.up(breakpoints === 'xl' ? 'lg' : breakpoints);\n\n  const hasResponsive =\n    variant === 'h1' ||\n    variant === 'h2' ||\n    variant === 'h3' ||\n    variant === 'h4' ||\n    variant === 'h5' ||\n    variant === 'h6';\n\n  const getFont: any =\n    hasResponsive && theme.typography[variant][key]\n      ? theme.typography[variant][key]\n      : theme.typography[variant];\n\n  const fontSize = remToPx(getFont.fontSize);\n  const lineHeight = Number(theme.typography[variant].lineHeight) * fontSize;\n  const { fontWeight, letterSpacing } = theme.typography[variant];\n\n  return { fontSize, lineHeight, fontWeight, letterSpacing };\n}\n\n// ----------------------------------------------------------------------\n\nexport function remToPx(value: string) {\n  return Math.round(parseFloat(value) * 16);\n}\n\nexport function pxToRem(value: number) {\n  return `${value / 16}rem`;\n}\n\nexport function responsiveFontSizes({ sm, md, lg }: { sm: number; md: number; lg: number }) {\n  return {\n    '@media (min-width:600px)': {\n      fontSize: pxToRem(sm),\n    },\n    '@media (min-width:900px)': {\n      fontSize: pxToRem(md),\n    },\n    '@media (min-width:1200px)': {\n      fontSize: pxToRem(lg),\n    },\n  };\n}\n\n// ----------------------------------------------------------------------\n\nfunction useWidth() {\n  const theme = useTheme();\n  const keys = [...theme.breakpoints.keys].reverse();\n  return (\n    // @ts-ignore not sure what is this\n    keys.reduce((output, key) => {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const matches = useResponsive('up', key);\n      return !output && matches ? key : output;\n    }, null) || 'xs'\n  );\n}\n"]},"metadata":{},"sourceType":"module"}