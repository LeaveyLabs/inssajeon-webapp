{"ast":null,"code":"var _jsxFileName = \"/Users/adamvnovak/code/inssajeon/inssajeon-webapp/src/components/settings/SettingFullscreen.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; // @mui\n\nimport { alpha } from '@mui/material/styles';\nimport { Button } from '@mui/material'; // components\n\nimport Iconify from '../Iconify'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SettingFullscreen() {\n  _s();\n\n  const [fullscreen, setFullscreen] = useState(false);\n\n  const toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n      setFullscreen(true);\n    } else if (document.exitFullscreen) {\n      document.exitFullscreen();\n      setFullscreen(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    fullWidth: true,\n    size: \"large\",\n    variant: \"outlined\",\n    color: fullscreen ? 'primary' : 'inherit',\n    startIcon: /*#__PURE__*/_jsxDEV(Iconify, {\n      icon: fullscreen ? 'ic:round-fullscreen-exit' : 'ic:round-fullscreen'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 18\n    }, this),\n    onClick: toggleFullScreen,\n    sx: {\n      fontSize: 14,\n      ...(fullscreen && {\n        bgcolor: theme => alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n      })\n    },\n    children: fullscreen ? 'Exit Fullscreen' : 'Fullscreen'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SettingFullscreen, \"ry5Q4rsjcX6+nIohyyiPq3Tz0gk=\");\n\n_c = SettingFullscreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingFullscreen\");","map":{"version":3,"sources":["/Users/adamvnovak/code/inssajeon/inssajeon-webapp/src/components/settings/SettingFullscreen.tsx"],"names":["useState","alpha","Button","Iconify","SettingFullscreen","fullscreen","setFullscreen","toggleFullScreen","document","fullscreenElement","documentElement","requestFullscreen","exitFullscreen","fontSize","bgcolor","theme","palette","primary","main","action","selectedOpacity"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;;AACA,SAASC,KAAT,QAAsB,sBAAtB;AACA,SAASC,MAAT,QAAuB,eAAvB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,YAApB,C,CAEA;;;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAAA;;AAC1C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMO,gBAAgB,GAAG,MAAM;AAC7B,QAAI,CAACC,QAAQ,CAACC,iBAAd,EAAiC;AAC/BD,MAAAA,QAAQ,CAACE,eAAT,CAAyBC,iBAAzB;AACAL,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAHD,MAGO,IAAIE,QAAQ,CAACI,cAAb,EAA6B;AAClCJ,MAAAA,QAAQ,CAACI,cAAT;AACAN,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GARD;;AAUA,sBACE,QAAC,MAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,KAAK,EAAED,UAAU,GAAG,SAAH,GAAe,SAJlC;AAKE,IAAA,SAAS,eAAE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEA,UAAU,GAAG,0BAAH,GAAgC;AAAzD;AAAA;AAAA;AAAA;AAAA,YALb;AAME,IAAA,OAAO,EAAEE,gBANX;AAOE,IAAA,EAAE,EAAE;AACFM,MAAAA,QAAQ,EAAE,EADR;AAEF,UAAIR,UAAU,IAAI;AAChBS,QAAAA,OAAO,EAAGC,KAAD,IACPd,KAAK,CAACc,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsBC,IAAvB,EAA6BH,KAAK,CAACC,OAAN,CAAcG,MAAd,CAAqBC,eAAlD;AAFS,OAAlB;AAFE,KAPN;AAAA,cAeGf,UAAU,GAAG,iBAAH,GAAuB;AAfpC;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAhCuBD,iB;;KAAAA,iB","sourcesContent":["import { useState } from 'react';\n// @mui\nimport { alpha } from '@mui/material/styles';\nimport { Button } from '@mui/material';\n// components\nimport Iconify from '../Iconify';\n\n// ----------------------------------------------------------------------\n\nexport default function SettingFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n\n  const toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n      setFullscreen(true);\n    } else if (document.exitFullscreen) {\n      document.exitFullscreen();\n      setFullscreen(false);\n    }\n  };\n\n  return (\n    <Button\n      fullWidth\n      size=\"large\"\n      variant=\"outlined\"\n      color={fullscreen ? 'primary' : 'inherit'}\n      startIcon={<Iconify icon={fullscreen ? 'ic:round-fullscreen-exit' : 'ic:round-fullscreen'} />}\n      onClick={toggleFullScreen}\n      sx={{\n        fontSize: 14,\n        ...(fullscreen && {\n          bgcolor: (theme) =>\n            alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n        }),\n      }}\n    >\n      {fullscreen ? 'Exit Fullscreen' : 'Fullscreen'}\n    </Button>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}