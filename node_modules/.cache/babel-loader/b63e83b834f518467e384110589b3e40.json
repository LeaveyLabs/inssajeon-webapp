{"ast":null,"code":"import _mock from './_mock';\nimport { randomNumberRange, randomInArray } from './funcs'; // ----------------------------------------------------------------------\n\nexport const _userAbout = {\n  id: _mock.id(1),\n  cover: _mock.image.cover(1),\n  position: 'UI Designer',\n  follower: randomNumberRange(999, 99999),\n  following: randomNumberRange(999, 99999),\n  quote: 'Tart I love sugar plum I love oat cake. Sweet roll caramels I love jujubes. Topping cake wafer..',\n  country: _mock.address.country(1),\n  email: _mock.email(1),\n  company: _mock.company(1),\n  school: _mock.company(2),\n  role: 'Manager',\n  facebookLink: `https://www.facebook.com/caitlyn.kerluke`,\n  instagramLink: `https://www.instagram.com/caitlyn.kerluke`,\n  linkedinLink: `https://www.linkedin.com/in/caitlyn.kerluke`,\n  twitterLink: `https://www.twitter.com/caitlyn.kerluke`\n};\nexport const _userFollowers = [...Array(18)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  country: _mock.address.country(index),\n  isFollowed: _mock.boolean(index)\n}));\nexport const _userFriends = [...Array(18)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  role: _mock.role(index)\n}));\nexport const _userGallery = [...Array(12)].map((_, index) => ({\n  id: _mock.id(index),\n  title: _mock.text.title(index),\n  postAt: _mock.time(index),\n  imageUrl: _mock.image.cover(index)\n}));\nexport const _userFeeds = [...Array(3)].map((_, index) => ({\n  id: _mock.id(index),\n  author: {\n    id: _mock.id(8),\n    avatarUrl: _mock.image.avatar(1),\n    name: 'Caitlyn Kerluke'\n  },\n  isLiked: true,\n  createdAt: _mock.time(index),\n  media: _mock.image.feed(index),\n  message: _mock.text.sentence(index),\n  personLikes: [...Array(36)].map((_, index) => ({\n    name: _mock.name.fullName(index),\n    avatarUrl: _mock.image.avatar(index + 2)\n  })),\n  comments: index === 2 && [] || [{\n    id: _mock.id(7),\n    author: {\n      id: _mock.id(8),\n      avatarUrl: _mock.image.avatar(randomInArray([2, 3, 4, 5, 6]) || 2),\n      name: _mock.name.fullName(index + 5)\n    },\n    createdAt: _mock.time(2),\n    message: 'Praesent venenatis metus at'\n  }, {\n    id: _mock.id(9),\n    author: {\n      id: _mock.id(10),\n      avatarUrl: _mock.image.avatar(randomInArray([7, 8, 9, 10, 11]) || 7),\n      name: _mock.name.fullName(index + 6)\n    },\n    createdAt: _mock.time(3),\n    message: 'Etiam rhoncus. Nullam vel sem. Pellentesque libero tortor, tincidunt et, tincidunt eget, semper nec, quam. Sed lectus.'\n  }]\n}));\nexport const _userCards = [...Array(24)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  cover: _mock.image.cover(index),\n  name: _mock.name.fullName(index),\n  follower: randomNumberRange(999, 99999),\n  following: randomNumberRange(999, 99999),\n  totalPost: randomNumberRange(999, 99999),\n  position: _mock.role(index)\n}));\nexport const _userPayment = [...Array(2)].map((_, index) => ({\n  id: _mock.id(index),\n  cardNumber: ['**** **** **** 1234', '**** **** **** 5678', '**** **** **** 7878'][index],\n  cardType: ['master_card', 'visa', 'master_card'][index]\n}));\nexport const _userAddressBook = [...Array(4)].map((_, index) => ({\n  id: _mock.id(index),\n  name: _mock.name.fullName(index),\n  phone: _mock.phoneNumber(index),\n  country: _mock.address.country(index),\n  state: 'New Hampshire',\n  city: 'East Sambury',\n  street: '41256 Kamille Turnpike',\n  zipCode: '85807'\n}));\nexport const _userInvoices = [...Array(10)].map((_, index) => ({\n  id: _mock.id(index),\n  createdAt: _mock.time(index),\n  price: _mock.number.price(index)\n}));\nexport const _userList = [...Array(24)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  email: _mock.email(index),\n  phoneNumber: _mock.phoneNumber(index),\n  address: '908 Jack Locks',\n  country: _mock.address.country(index),\n  state: 'Virginia',\n  city: 'Rancho Cordova',\n  zipCode: '85807',\n  company: _mock.company(index),\n  isVerified: _mock.boolean(index),\n  status: randomInArray(['active', 'banned']),\n  role: _mock.role(index)\n}));","map":{"version":3,"sources":["/Users/adamvnovak/code/inssajeon/inssajeon-webapp/src/_mock/_user.ts"],"names":["_mock","randomNumberRange","randomInArray","_userAbout","id","cover","image","position","follower","following","quote","country","address","email","company","school","role","facebookLink","instagramLink","linkedinLink","twitterLink","_userFollowers","Array","map","_","index","avatarUrl","avatar","name","fullName","isFollowed","boolean","_userFriends","_userGallery","title","text","postAt","time","imageUrl","_userFeeds","author","isLiked","createdAt","media","feed","message","sentence","personLikes","comments","_userCards","totalPost","_userPayment","cardNumber","cardType","_userAddressBook","phone","phoneNumber","state","city","street","zipCode","_userInvoices","price","number","_userList","isVerified","status"],"mappings":"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","sourcesContent":["import _mock from './_mock';\nimport { randomNumberRange, randomInArray } from './funcs';\n\n// ----------------------------------------------------------------------\n\nexport const _userAbout = {\n  id: _mock.id(1),\n  cover: _mock.image.cover(1),\n  position: 'UI Designer',\n  follower: randomNumberRange(999, 99999),\n  following: randomNumberRange(999, 99999),\n  quote:\n    'Tart I love sugar plum I love oat cake. Sweet roll caramels I love jujubes. Topping cake wafer..',\n  country: _mock.address.country(1),\n  email: _mock.email(1),\n  company: _mock.company(1),\n  school: _mock.company(2),\n  role: 'Manager',\n  facebookLink: `https://www.facebook.com/caitlyn.kerluke`,\n  instagramLink: `https://www.instagram.com/caitlyn.kerluke`,\n  linkedinLink: `https://www.linkedin.com/in/caitlyn.kerluke`,\n  twitterLink: `https://www.twitter.com/caitlyn.kerluke`,\n};\n\nexport const _userFollowers = [...Array(18)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  country: _mock.address.country(index),\n  isFollowed: _mock.boolean(index),\n}));\n\nexport const _userFriends = [...Array(18)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  role: _mock.role(index),\n}));\n\nexport const _userGallery = [...Array(12)].map((_, index) => ({\n  id: _mock.id(index),\n  title: _mock.text.title(index),\n  postAt: _mock.time(index),\n  imageUrl: _mock.image.cover(index),\n}));\n\nexport const _userFeeds = [...Array(3)].map((_, index) => ({\n  id: _mock.id(index),\n  author: {\n    id: _mock.id(8),\n    avatarUrl: _mock.image.avatar(1),\n    name: 'Caitlyn Kerluke',\n  },\n  isLiked: true,\n  createdAt: _mock.time(index),\n  media: _mock.image.feed(index),\n  message: _mock.text.sentence(index),\n  personLikes: [...Array(36)].map((_, index) => ({\n    name: _mock.name.fullName(index),\n    avatarUrl: _mock.image.avatar(index + 2),\n  })),\n  comments: (index === 2 && []) || [\n    {\n      id: _mock.id(7),\n      author: {\n        id: _mock.id(8),\n        avatarUrl: _mock.image.avatar(randomInArray([2, 3, 4, 5, 6]) || 2),\n        name: _mock.name.fullName(index + 5),\n      },\n      createdAt: _mock.time(2),\n      message: 'Praesent venenatis metus at',\n    },\n    {\n      id: _mock.id(9),\n      author: {\n        id: _mock.id(10),\n        avatarUrl: _mock.image.avatar(randomInArray([7, 8, 9, 10, 11]) || 7),\n        name: _mock.name.fullName(index + 6),\n      },\n      createdAt: _mock.time(3),\n      message:\n        'Etiam rhoncus. Nullam vel sem. Pellentesque libero tortor, tincidunt et, tincidunt eget, semper nec, quam. Sed lectus.',\n    },\n  ],\n}));\n\nexport const _userCards = [...Array(24)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  cover: _mock.image.cover(index),\n  name: _mock.name.fullName(index),\n  follower: randomNumberRange(999, 99999),\n  following: randomNumberRange(999, 99999),\n  totalPost: randomNumberRange(999, 99999),\n  position: _mock.role(index),\n}));\n\nexport const _userPayment = [...Array(2)].map((_, index) => ({\n  id: _mock.id(index),\n  cardNumber: ['**** **** **** 1234', '**** **** **** 5678', '**** **** **** 7878'][index],\n  cardType: ['master_card', 'visa', 'master_card'][index],\n}));\n\nexport const _userAddressBook = [...Array(4)].map((_, index) => ({\n  id: _mock.id(index),\n  name: _mock.name.fullName(index),\n  phone: _mock.phoneNumber(index),\n  country: _mock.address.country(index),\n  state: 'New Hampshire',\n  city: 'East Sambury',\n  street: '41256 Kamille Turnpike',\n  zipCode: '85807',\n}));\n\nexport const _userInvoices = [...Array(10)].map((_, index) => ({\n  id: _mock.id(index),\n  createdAt: _mock.time(index),\n  price: _mock.number.price(index),\n}));\n\nexport const _userList = [...Array(24)].map((_, index) => ({\n  id: _mock.id(index),\n  avatarUrl: _mock.image.avatar(index),\n  name: _mock.name.fullName(index),\n  email: _mock.email(index),\n  phoneNumber: _mock.phoneNumber(index),\n  address: '908 Jack Locks',\n  country: _mock.address.country(index),\n  state: 'Virginia',\n  city: 'Rancho Cordova',\n  zipCode: '85807',\n  company: _mock.company(index),\n  isVerified: _mock.boolean(index),\n  status: randomInArray(['active', 'banned']),\n  role: _mock.role(index),\n}));\n"]},"metadata":{},"sourceType":"module"}